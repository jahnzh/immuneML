definitions:
  datasets: # every instruction uses a dataset
    my_dataset:
      format: AIRR
      params:
        path: C:\Users\Wii\Documents\UiO\Master\immuneMLReal\immuneML\app\example\repertoires
        metadata_file: C:\Users\Wii\Documents\UiO\Master\immuneMLReal\immuneML\app\example\metadata.csv


  preprocessing_sequences:
    my_preprocessing: # user-defined preprocessing name
      - my_beta_chain_filter:
          ChainRepertoireFilter:
            keep_chain: TRB

  ml_methods:
    my_svm:       # example ML method with user-defined settings
      SVM:        # Here, a third level of 3-fold cross-validation is used
        penalty:  # to determine the optimal hyperparameters for 'C' and 'penalty'
          - l1    # This functionality is only available for scikit-learn classifiers
          - l2
        C:
         - 0.01
         - 0.1
         - 1
         - 10
         - 100
      model_selection_cv: True
      model_selection_n_folds: 3
    my_log_reg: LogisticRegression # example ML method with default settings

  encodings:
    my_kmer_freq_encoding:
      KmerFrequency:
        k: 3

  reports:
    my_coefficients: Coefficients
    my_sequence_lengths: SequenceLengthDistribution
    my_performance: MLSettingsPerformance

instructions:
  my_instr:
    type: TrainMLModel

    dataset: my_dataset
    labels:
    - signal_disease

    settings:
      - encoding: my_kmer_freq_encoding # Testing my_kmer_freq_encoding in combination with
        ml_method: my_log_reg           # my_log_reg and my_svm, with and without my_preprocessing
      - encoding: my_kmer_freq_encoding
        ml_method: my_svm
      - preprocessing: my_preprocessing # preprocessing can only be defined for repertoire datasets
        encoding: my_kmer_freq_encoding
        ml_method: my_log_reg
      - preprocessing: my_preprocessing
        encoding: my_kmer_freq_encoding
        ml_method: my_svm

    assessment:                # example defining 5-fold cross-validation
      split_strategy: k_fold
      split_count: 5
      reports:
        models:                # plot the coefficients of the trained models
        - my_coefficients
        data:                  # run this report on all data
        - my_sequence_lengths
    selection:                 # example defining 3-fold monte carlo cross-validation with
      split_strategy: random   # 70% randomly chosen training data per split
      split_count: 3
      training_percentage: 0.7
      reports:                 # run this report on training/validation splits
        data_splits:
        - my_sequence_lengths

    optimization_metric: balanced_accuracy # the metric used for optimization
    metrics: # other metrics to compute
    - accuracy
    - auc
    strategy: GridSearch
    refit_optimal_model: False
    reports:
    - my_performance
    number_of_processes: 4